<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>⚽ Futbol Bilgi Arena - ArsanaGames | En İyi Online Futbol Yarışması</title>
    
    <!-- SEO Meta Tags -->
    <meta name="description" content="ArsanaGames tarafından geliştirilen eğlenceli futbol bilgi yarışması! 2-8 oyuncu, 500+ soru, çok oyunculu mod. Aras Gaygusuz imzası ile ücretsiz oyna!">
    <meta name="keywords" content="ArsanaGames, Arsana Games, Arsana, Aras Gaygusuz, futbol bilgi yarışması, futbol quiz, online futbol oyunu, çok oyunculu futbol, futbol soruları, futbol bilgi testi, ücretsiz futbol oyunu, browser game, futbol arena">
    <meta name="author" content="Aras Gaygusuz - ArsanaGames">
    <meta name="robots" content="index, follow">
    <meta name="language" content="Turkish">
    
    <!-- Open Graph Meta Tags (Social Media) -->
    <meta property="og:title" content="⚽ Futbol Bilgi Arena - ArsanaGames">
    <meta property="og:description" content="En eğlenceli futbol bilgi yarışması! 8 oyuncuya kadar çok oyunculu mod, 500+ soru ve harika ses efektleri. Aras Gaygusuz imzası ile ücretsiz!">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://bayramgaygusuz.github.io/aras/">
    <meta property="og:site_name" content="ArsanaGames">
    <meta property="og:locale" content="tr_TR">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="⚽ Futbol Bilgi Arena - ArsanaGames">
    <meta name="twitter:description" content="En eğlenceli futbol bilgi yarışması! Çok oyunculu mod, 500+ soru. Aras Gaygusuz imzası ile ücretsiz oyna!">
    
    <!-- Additional SEO -->
    <meta name="theme-color" content="#00c9ff">
    <link rel="canonical" href="https://bayramgaygusuz.github.io/aras/">
    
    <!-- Schema.org JSON-LD -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Game",
      "name": "Futbol Bilgi Arena",
      "description": "ArsanaGames tarafından geliştirilen çok oyunculu futbol bilgi yarışması",
      "author": {
        "@type": "Person",
        "name": "Aras Gaygusuz"
      },
      "publisher": {
        "@type": "Organization",
        "name": "ArsanaGames"
      },
      "url": "https://bayramgaygusuz.github.io/aras/",
      "gameCategory": "Quiz Game",
      "numberOfPlayers": "2-8",
      "inLanguage": "tr-TR"
    }
    </script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(-45deg, #1e3c72, #2a5298, #00c9ff, #92fe9d);
            background-size: 400% 400%;
            animation: gradientShift 8s ease infinite;
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .screen {
            display: none;
            text-align: center;
            width: 100%;
            animation: fadeIn 0.5s ease-in;
        }

        .screen.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .logo {
            font-size: 3em;
            font-weight: bold;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            animation: bounce 2s ease-in-out infinite;
        }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .game-settings {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            max-width: 800px;
            margin: 0 auto;
        }

        .setting-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .question-count-selector {
            display: flex;
            gap: 15px;
            margin: 15px 0;
            justify-content: center;
        }

        .count-btn {
            padding: 15px 25px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            color: white;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .count-btn.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.3);
            transform: scale(1.1);
        }

        .player-count-selector {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
        }

        .player-count-btn {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .player-count-display {
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
            min-width: 60px;
            text-align: center;
        }

        .players-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .player-card {
            position: relative;
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .character-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin: 15px 0;
        }

        .character {
            font-size: 2em;
            padding: 15px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid transparent;
        }

        .character:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .character.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.3);
            animation: pulse 1s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        .remove-player {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #ff6b6b;
            border: none;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.2em;
        }

        input[type="text"] {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 10px;
            font-size: 1.1em;
            margin: 10px 0;
            background: rgba(255, 255, 255, 0.9);
            color: #333;
        }

        .btn {
            background: linear-gradient(45deg, #00c9ff, #92fe9d);
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.2em;
            font-weight: bold;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .mute-button {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            border: none;
            padding: 15px;
            border-radius: 50%;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .mute-button:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }

        .mute-button.muted {
            background: rgba(255, 107, 107, 0.8);
        }

        .game-screen {
            max-width: 1000px;
            margin: 0 auto;
        }

        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            flex-wrap: wrap;
            gap: 15px;
        }

        .player-info {
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.5s ease;
            padding: 20px;
            border-radius: 20px;
            border: 3px solid transparent;
        }

        .player-info.active {
            transform: scale(1.1);
            background: rgba(255, 255, 255, 0.2);
            border-color: #00ff88;
            box-shadow: 0 0 30px rgba(0, 255, 136, 0.5);
            animation: activePlayerPulse 2s ease-in-out infinite;
        }

        .player-info.inactive {
            opacity: 0.6;
            transform: scale(0.95);
        }

        @keyframes activePlayerPulse {
            0%, 100% { box-shadow: 0 0 30px rgba(0, 255, 136, 0.5); }
            50% { box-shadow: 0 0 50px rgba(0, 255, 136, 0.8); }
        }

        .turn-indicator {
            position: absolute;
            top: -50px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.5em;
            font-weight: bold;
            animation: turnBounce 1s ease-in-out infinite;
            box-shadow: 0 5px 20px rgba(255, 107, 107, 0.4);
        }

        @keyframes turnBounce {
            0%, 100% { transform: translateX(-50%) translateY(0); }
            50% { transform: translateX(-50%) translateY(-10px); }
        }

        .player-avatar {
            font-size: 2.5em;
            background: rgba(255, 255, 255, 0.2);
            padding: 15px;
            border-radius: 50%;
        }

        .player-details h3 {
            font-size: 1.5em;
            margin-bottom: 5px;
        }

        .score {
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
        }

        .vs-divider {
            font-size: 3em;
            font-weight: bold;
            color: #ff6b6b;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            animation: rotate 2s linear infinite;
        }

        @keyframes rotate {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .timer-bar {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .timer-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #ffd93d);
            border-radius: 10px;
            transition: width 0.1s linear;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .question-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 40px;
            border-radius: 20px;
            margin-bottom: 30px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .question-number {
            font-size: 1.2em;
            color: #ffd93d;
            margin-bottom: 15px;
        }

        .question-text {
            font-size: 1.8em;
            line-height: 1.4;
            margin-bottom: 30px;
            font-weight: 600;
        }

        .answers-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .answer-btn {
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            color: white;
            font-size: 1.3em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .answer-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
        }

        .answer-btn:active {
            transform: translateY(-1px);
        }

        .answer-btn.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }

        .answer-btn.correct {
            background: rgba(0, 255, 136, 0.3);
            border-color: #00ff88;
            animation: correctPulse 0.6s ease-in-out;
        }

        .answer-btn.wrong {
            background: rgba(255, 107, 107, 0.3);
            border-color: #ff6b6b;
            animation: wrongShake 0.6s ease-in-out;
        }

        @keyframes correctPulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @keyframes wrongShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
        }

        .result-screen {
            text-align: center;
            max-width: 600px;
            margin: 0 auto;
        }

        .winner-crown {
            font-size: 5em;
            margin-bottom: 20px;
            animation: bounce 1s ease-in-out infinite;
        }

        .final-scores {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 40px 0;
        }

        .final-score {
            text-align: center;
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 15px;
        }

        .final-score .avatar {
            font-size: 3em;
            margin-bottom: 10px;
        }

        .final-score .name {
            font-size: 1.5em;
            margin-bottom: 5px;
        }

        .final-score .score {
            font-size: 2.5em;
            font-weight: bold;
        }

        .leaderboard {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin-top: 30px;
        }

        .leaderboard-entry {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .trophy {
            font-size: 1.5em;
        }

        .developer-credit {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 0.9em;
            font-weight: bold;
            color: white;
            box-shadow: 0 4px 15px rgba(0,0,0,0.3);
            z-index: 1000;
            animation: glow 3s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4); }
            to { box-shadow: 0 4px 25px rgba(118, 75, 162, 0.6); }
        }

        @media (max-width: 768px) {
            .game-settings {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .game-header {
                flex-direction: column;
                gap: 20px;
            }

            .answers-grid {
                grid-template-columns: 1fr;
            }

            .final-scores {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .logo {
                font-size: 2em;
            }

            .question-text {
                font-size: 1.4em;
            }

            .players-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Ana Menü -->
        <div id="menu-screen" class="screen active">
            <div class="logo">⚽ FUTBOL BİLGİ ARENA</div>
            <div class="card">
                <h2>Hoş Geldiniz!</h2>
                <p>En büyük futbol bilgi yarışmasına hazır mısınız?</p>
                <button class="btn" onclick="showGameSettings()">🎮 OYUNA BAŞLA</button>
                <button class="btn" onclick="showLeaderboard()">🏆 LİDER TABLOSU</button>
            </div>
        </div>

        <!-- Oyun Ayarları -->
        <div id="settings-screen" class="screen">
            <div class="logo">⚙️ Oyun Ayarları</div>
            <div class="card">
                <div class="game-settings">
                    <div class="setting-card">
                        <h3>📊 Soru Sayısı</h3>
                        <div class="question-count-selector">
                            <button class="count-btn selected" data-count="10">10</button>
                            <button class="count-btn" data-count="20">20</button>
                            <button class="count-btn" data-count="30">30</button>
                        </div>
                    </div>
                    <div class="setting-card">
                        <h3>👥 Oyuncu Sayısı</h3>
                        <div class="player-count-selector">
                            <button class="player-count-btn" onclick="changePlayerCount(-1)">➖</button>
                            <span class="player-count-display" id="player-count-display">2</span>
                            <button class="player-count-btn" onclick="changePlayerCount(1)">➕</button>
                        </div>
                        <p><small>2-8 oyuncu arası</small></p>
                    </div>
                </div>
                <button class="btn" onclick="showPlayerSetup()">✅ AYARLARI ONAYLA</button>
                <button class="btn" onclick="showMenu()">🔙 GERİ</button>
            </div>
        </div>

        <!-- Oyuncu Kurulumu -->
        <div id="setup-screen" class="screen">
            <div class="logo">⚽ Oyuncu Seçimi</div>
            <div class="card">
                <div class="players-grid" id="players-grid">
                    <!-- Oyuncular dinamik olarak eklenecek -->
                </div>
                <button class="btn" onclick="startGame()" id="start-btn" disabled>⚽ MAÇA BAŞLA!</button>
                <button class="btn" onclick="showGameSettings()">🔙 GERİ</button>
            </div>
        </div>

        <!-- Oyun Ekranı -->
        <div id="game-screen" class="screen">
            <button class="mute-button" id="mute-btn" onclick="toggleMute()">🔊</button>
            <div class="game-screen">
                <div class="game-header" id="game-header">
                    <!-- Oyuncular dinamik olarak eklenecek -->
                </div>

                <div class="timer-bar">
                    <div class="timer-fill" id="timer-fill"></div>
                </div>

                <div class="question-card">
                    <div class="question-number" id="question-number">Soru 1/10</div>
                    <div class="question-text" id="question-text">Soru yükleniyor...</div>
                    <div class="answers-grid" id="answers-grid">
                        <!-- Cevap seçenekleri buraya gelecek -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Sonuç Ekranı -->
        <div id="result-screen" class="screen">
            <div class="result-screen">
                <div class="winner-crown" id="winner-crown">👑</div>
                <h1 id="winner-text">KAZANAN!</h1>
                <div class="final-scores" id="final-scores">
                    <!-- Final skorları dinamik olarak eklenecek -->
                </div>
                <button class="btn" onclick="showMenu()">🏠 ANA MENÜ</button>
                <button class="btn" onclick="showGameSettings()">🔄 YENİDEN OYNA</button>
            </div>
        </div>

        <!-- Lider Tablosu -->
        <div id="leaderboard-screen" class="screen">
            <div class="logo">🏆 Lider Tablosu</div>
            <div class="card">
                <div class="leaderboard" id="leaderboard-content">
                    <h3>📅 Bugünün En İyileri</h3>
                    <div id="daily-leaders"></div>
                    <h3>📊 Haftalık Şampiyonlar</h3>
                    <div id="weekly-leaders"></div>
                </div>
                <button class="btn" onclick="showMenu()">🔙 ANA MENÜ</button>
            </div>
        </div>

        <!-- Developer Credit -->
        <div class="developer-credit">
            ⚡ Powered by ArsanaGames
        </div>
    </div>

    <script>
        // Oyun durumu
        let gameState = {
            players: [
                { name: 'Aras', character: '⚽', score: 0 },
                { name: '', character: '🚀', score: 0 }
            ],
            questionCount: 10,
            currentQuestion: 0,
            questions: [],
            timer: null,
            timeLeft: 15,
            currentPlayer: 0,
            gameActive: false,
            isMuted: false
        };

        // Mevcut karakterler
        const availableCharacters = ['⚽', '🏆', '👑', '🔥', '⭐', '💎', '🚀', '⚡', '🌟', '🎪', '🎨', '🎵', '🎯', '🎮', '🎸', '🎭'];

        // Küfür filtresi
        const bannedWords = [
            'aptal', 'salak', 'ahmak', 'gerizekalı', 'mal', 'beyinsiz',
            'dangalak', 'budala', 'kıro', 'it', 'köpek', 'eşşek'
        ];

        // Sorular (JSON'dan yüklenecek)
        let allQuestions = [];

        // JSON dosyasından soruları yükle
        async function loadQuestions() {
            try {
                const response = await fetch('./sorular.json');
                if (!response.ok) {
                    throw new Error('Sorular yüklenemedi');
                }
                const questions = await response.json();
                allQuestions = questions;
                console.log(`✅ ${allQuestions.length} soru yüklendi!`);
                
                // Yükleme tamamlandıktan sonra oyunu aktif et
                document.querySelector('.btn').disabled = false;
                
            } catch (error) {
                console.error('❌ Sorular yüklenirken hata:', error);
                
                // Hata durumunda örnek sorularla devam et
                allQuestions = [
                    {
                        "soru": "'Old Trafford' hangi kulübün stadyumudur?",
                        "secenekler": {
                            "A": "Manchester United",
                            "B": "Chelsea", 
                            "C": "Atletico Madrid",
                            "D": "LA Galaxy"
                        },
                        "dogru": "A"
                    },
                    {
                        "soru": "Efsane futbolcu Zinedine Zidane hangi ülkeyi temsil eder?",
                        "secenekler": {
                            "A": "Avustralya",
                            "B": "Arjantin",
                            "C": "Katar", 
                            "D": "Fransa"
                        },
                        "dogru": "D"
                    },
                    {
                        "soru": "Bir maçta aynı takımdan sahada kaç oyuncu bulunur?",
                        "secenekler": {
                            "A": "11",
                            "B": "10",
                            "C": "9",
                            "D": "12"
                        },
                        "dogru": "A"
                    },
                    {
                        "soru": "Serbest vuruşta baraj ile top arası asgari mesafe nedir?",
                        "secenekler": {
                            "A": "9.15 m",
                            "B": "7.5 m",
                            "C": "5 m",
                            "D": "11 m"
                        },
                        "dogru": "A"
                    },
                    {
                        "soru": "Real Madrid kulübü hangi şehirde yer alır?",
                        "secenekler": {
                            "A": "Madrid",
                            "B": "İstanbul",
                            "C": "Manchester", 
                            "D": "Barselona"
                        },
                        "dogru": "A"
                    }
                ];
                
                // Kullanıcıya bilgi ver
                showErrorMessage('Soru dosyası bulunamadı, örnek sorularla devam ediliyor.');
            }
        }

        // Hata mesajı göster
        function showErrorMessage(message) {
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(255, 107, 107, 0.9);
                color: white;
                padding: 15px 25px;
                border-radius: 10px;
                z-index: 10000;
                font-weight: bold;
                animation: slideDown 0.5s ease;
            `;
            errorDiv.textContent = message;
            document.body.appendChild(errorDiv);
            
            setTimeout(() => {
                errorDiv.style.opacity = '0';
                setTimeout(() => errorDiv.remove(), 500);
            }, 5000);
        }

        // Ses sistemi
        class SoundSystem {
            constructor() {
                this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                this.musicVolume = 0.1;
                this.sfxVolume = 0.7;
                this.backgroundMusic = null;
                this.createBackgroundMusic();
            }

            createBackgroundMusic() {
                const oscillator1 = this.audioContext.createOscillator();
                const oscillator2 = this.audioContext.createOscillator();
                const gainNode = this.audioContext.createGain();
                
                oscillator1.frequency.setValueAtTime(80, this.audioContext.currentTime);
                oscillator2.frequency.setValueAtTime(120, this.audioContext.currentTime);
                oscillator1.type = 'sine';
                oscillator2.type = 'triangle';
                
                gainNode.gain.setValueAtTime(0, this.audioContext.currentTime);
                
                oscillator1.connect(gainNode);
                oscillator2.connect(gainNode);
                gainNode.connect(this.audioContext.destination);
                
                this.backgroundMusic = { oscillator1, oscillator2, gainNode };
            }

            playTone(frequency, duration, type = 'sine') {
                if (gameState.isMuted) return;
                
                const oscillator = this.audioContext.createOscillator();
                const gainNode = this.audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(this.audioContext.destination);
                
                oscillator.frequency.setValueAtTime(frequency, this.audioContext.currentTime);
                oscillator.type = type;
                
                gainNode.gain.setValueAtTime(this.sfxVolume, this.audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + duration);
                
                oscillator.start(this.audioContext.currentTime);
                oscillator.stop(this.audioContext.currentTime + duration);
            }

            playCorrectSound() {
                this.playTone(523.25, 0.3, 'sine');
                setTimeout(() => this.playTone(659.25, 0.3, 'sine'), 150);
                setTimeout(() => this.playTone(783.99, 0.4, 'sine'), 300);
            }

            playWrongSound() {
                this.playTone(220, 0.5, 'sawtooth');
                setTimeout(() => this.playTone(185, 0.3, 'sawtooth'), 150);
                setTimeout(() => this.playTone(146.83, 0.6, 'sawtooth'), 300);
            }

            playClickSound() {
                this.playTone(800, 0.1, 'square');
            }

            playTickSound() {
                this.playTone(1000, 0.1, 'sine');
            }

            playTimeUpSound() {
                for(let i = 0; i < 3; i++) {
                    setTimeout(() => this.playTone(1760, 0.3, 'sawtooth'), i * 200);
                }
            }

            playVictorySound() {
                const notes = [523.25, 659.25, 783.99, 1046.50];
                notes.forEach((note, index) => {
                    setTimeout(() => this.playTone(note, 0.5, 'sine'), index * 200);
                });
            }

            startBackgroundMusic() {
                if (gameState.isMuted || (this.backgroundMusic && this.backgroundMusic.started)) return;
                
                const { oscillator1, oscillator2, gainNode } = this.backgroundMusic;
                
                oscillator1.start();
                oscillator2.start();
                this.backgroundMusic.started = true;
                
                gainNode.gain.exponentialRampToValueAtTime(this.musicVolume, this.audioContext.currentTime + 2);
            }

            stopBackgroundMusic() {
                if (this.backgroundMusic && this.backgroundMusic.started) {
                    const { gainNode } = this.backgroundMusic;
                    gainNode.gain.exponentialRampToValueAtTime(0.001, this.audioContext.currentTime + 1);
                }
            }

            toggleMute() {
                gameState.isMuted = !gameState.isMuted;
                if (gameState.isMuted) {
                    this.stopBackgroundMusic();
                } else {
                    this.startBackgroundMusic();
                }
            }
        }

        let soundSystem = null;

        function initSoundSystem() {
            if (!soundSystem) {
                soundSystem = new SoundSystem();
            }
        }

        // Ekran geçişleri
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
        }

        function showMenu() {
            showScreen('menu-screen');
        }

        function showGameSettings() {
            initSoundSystem();
            
            // Sorular yüklenmemişse yükle
            if (allQuestions.length === 0) {
                loadQuestions();
            }
            
            showScreen('settings-screen');
            setupGameSettings();
        }

        function showPlayerSetup() {
            showScreen('setup-screen');
            setupPlayerCards();
        }

        function showLeaderboard() {
            showScreen('leaderboard-screen');
            displayLeaderboard();
        }

        // Oyun ayarları
        function setupGameSettings() {
            document.querySelectorAll('.count-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    if (soundSystem) soundSystem.playClickSound();
                    document.querySelectorAll('.count-btn').forEach(b => b.classList.remove('selected'));
                    btn.classList.add('selected');
                    gameState.questionCount = parseInt(btn.dataset.count);
                });
            });
        }

        function changePlayerCount(delta) {
            if (soundSystem) soundSystem.playClickSound();
            const currentCount = gameState.players.length;
            const newCount = currentCount + delta;
            
            if (newCount < 2 || newCount > 8) return;
            
            if (delta > 0) {
                const newPlayer = {
                    name: '',
                    character: availableCharacters[newCount - 1],
                    score: 0
                };
                gameState.players.push(newPlayer);
            } else {
                gameState.players.pop();
            }
            
            document.getElementById('player-count-display').textContent = gameState.players.length;
        }

        // Oyuncu kartları
        function setupPlayerCards() {
            const playersGrid = document.getElementById('players-grid');
            playersGrid.innerHTML = '';
            
            gameState.players.forEach((player, index) => {
                const playerCard = document.createElement('div');
                playerCard.className = 'player-card';
                playerCard.innerHTML = `
                    ${index > 1 ? '<button class="remove-player" onclick="removePlayer(' + index + ')">×</button>' : ''}
                    <h3>🎯 ${index + 1}. OYUNCU</h3>
                    <input type="text" id="player${index}-name" placeholder="İsminizi girin..." value="${player.name}">
                    <div class="character-grid" id="player${index}-chars"></div>
                `;
                
                playersGrid.appendChild(playerCard);
                
                const charGrid = document.getElementById(`player${index}-chars`);
                const startIndex = index * 2;
                
                for (let i = 0; i < 6; i++) {
                    const charIndex = (startIndex + i) % availableCharacters.length;
                    const character = availableCharacters[charIndex];
                    const charBtn = document.createElement('div');
                    charBtn.className = 'character';
                    charBtn.dataset.char = character;
                    charBtn.textContent = character;
                    charBtn.onclick = () => selectCharacter(index, character);
                    
                    if (character === player.character) {
                        charBtn.classList.add('selected');
                    }
                    
                    charGrid.appendChild(charBtn);
                }
                
                document.getElementById(`player${index}-name`).addEventListener('input', checkStartButton);
            });
            
            checkStartButton();
        }

        function selectCharacter(playerIndex, character) {
            if (soundSystem) soundSystem.playClickSound();
            
            document.querySelectorAll(`#player${playerIndex}-chars .character`).forEach(c => 
                c.classList.remove('selected')
            );
            
            document.querySelector(`#player${playerIndex}-chars .character[data-char="${character}"]`).classList.add('selected');
            
            gameState.players[playerIndex].character = character;
        }

        function removePlayer(index) {
            if (soundSystem) soundSystem.playClickSound();
            gameState.players.splice(index, 1);
            setupPlayerCards();
        }

        function checkStartButton() {
            const startBtn = document.getElementById('start-btn');
            let canStart = true;
            
            gameState.players.forEach((player, index) => {
                const nameInput = document.getElementById(`player${index}-name`);
                if (!nameInput || !nameInput.value.trim() || containsBannedWords(nameInput.value.trim())) {
                    canStart = false;
                }
            });
            
            startBtn.disabled = !canStart;
            startBtn.style.opacity = canStart ? '1' : '0.5';
        }

        function toggleMute() {
            if (!soundSystem) return;
            
            soundSystem.toggleMute();
            const muteBtn = document.getElementById('mute-btn');
            
            if (gameState.isMuted) {
                muteBtn.textContent = '🔇';
                muteBtn.classList.add('muted');
            } else {
                muteBtn.textContent = '🔊';
                muteBtn.classList.remove('muted');
            }
        }

        // Oyun başlatma
        function startGame() {
            gameState.players.forEach((player, index) => {
                player.name = document.getElementById(`player${index}-name`).value.trim();
                player.score = 0;
            });
            
            gameState.currentQuestion = 0;
            gameState.currentPlayer = 0;
            gameState.questions = shuffleArray([...allQuestions]).slice(0, gameState.questionCount);

            createGameHeader();

            if (soundSystem && !gameState.isMuted) {
                soundSystem.startBackgroundMusic();
            }

            showScreen('game-screen');
            loadNextQuestion();
        }

        function createGameHeader() {
            const gameHeader = document.getElementById('game-header');
            gameHeader.innerHTML = '';
            
            gameState.players.forEach((player, index) => {
                const playerInfo = document.createElement('div');
                playerInfo.className = 'player-info';
                playerInfo.id = `player${index}-info`;
                playerInfo.innerHTML = `
                    <div class="player-avatar">${player.character}</div>
                    <div class="player-details">
                        <h3>${player.name}</h3>
                        <div class="score" id="player${index}-score">0</div>
                    </div>
                `;
                gameHeader.appendChild(playerInfo);
                
                if (index < gameState.players.length - 1) {
                    const vsDivider = document.createElement('div');
                    vsDivider.className = 'vs-divider';
                    vsDivider.textContent = 'VS';
                    gameHeader.appendChild(vsDivider);
                }
            });
            
            const turnIndicator = document.createElement('div');
            turnIndicator.className = 'turn-indicator';
            turnIndicator.id = 'turn-indicator';
            gameHeader.appendChild(turnIndicator);
            
            updateTurnIndicator();
        }

        function updateTurnIndicator() {
            const turnIndicator = document.getElementById('turn-indicator');
            const currentPlayerName = gameState.players[gameState.currentPlayer].name;
            
            gameState.players.forEach((_, index) => {
                const playerInfo = document.getElementById(`player${index}-info`);
                playerInfo.classList.remove('active', 'inactive');
            });
            
            const activePlayerInfo = document.getElementById(`player${gameState.currentPlayer}-info`);
            activePlayerInfo.classList.add('active');
            
            gameState.players.forEach((_, index) => {
                if (index !== gameState.currentPlayer) {
                    const playerInfo = document.getElementById(`player${index}-info`);
                    playerInfo.classList.add('inactive');
                }
            });
            
            turnIndicator.textContent = `SİRADA: ${currentPlayerName.toUpperCase()}`;
            
            const colors = [
                'linear-gradient(45deg, #00c9ff, #92fe9d)',
                'linear-gradient(45deg, #ff6b6b, #ffd93d)',
                'linear-gradient(45deg, #667eea, #764ba2)',
                'linear-gradient(45deg, #f093fb, #f5576c)',
                'linear-gradient(45deg, #4facfe, #00f2fe)',
                'linear-gradient(45deg, #43e97b, #38f9d7)',
                'linear-gradient(45deg, #fa709a, #fee140)',
                'linear-gradient(45deg, #a8edea, #fed6e3)'
            ];
            
            turnIndicator.style.background = colors[gameState.currentPlayer % colors.length];
        }

        // Soru yükleme
        function loadNextQuestion() {
            if (gameState.currentQuestion >= gameState.questionCount) {
                endGame();
                return;
            }

            const question = gameState.questions[gameState.currentQuestion];
            
            gameState.currentPlayer = gameState.currentQuestion % gameState.players.length;
            updateTurnIndicator();
            
            document.getElementById('question-number').textContent = `Soru ${gameState.currentQuestion + 1}/${gameState.questionCount}`;
            document.getElementById('question-text').textContent = question.soru;

            const answersGrid = document.getElementById('answers-grid');
            answersGrid.innerHTML = '';

            const options = ['A', 'B', 'C', 'D'];
            options.forEach(option => {
                const answerBtn = document.createElement('button');
                answerBtn.className = 'answer-btn';
                answerBtn.textContent = `${option}) ${question.secenekler[option]}`;
                answerBtn.onclick = () => {
                    if (soundSystem) soundSystem.playClickSound();
                    selectAnswer(option, question.dogru);
                };
                answersGrid.appendChild(answerBtn);
            });

            startTimer();
        }

        function selectAnswer(selectedOption, correctAnswer) {
            if (!gameState.gameActive) return;

            gameState.gameActive = false;
            clearInterval(gameState.timer);

            const isCorrect = selectedOption === correctAnswer;
            
            if (soundSystem) {
                if (isCorrect) {
                    soundSystem.playCorrectSound();
                } else {
                    soundSystem.playWrongSound();
                }
            }
            
            document.querySelectorAll('.answer-btn').forEach(btn => {
                btn.classList.add('disabled');
                btn.onclick = null;
            });
            
            document.querySelectorAll('.answer-btn').forEach(btn => {
                if (btn.textContent.startsWith(selectedOption + ')')) {
                    btn.classList.add(isCorrect ? 'correct' : 'wrong');
                }
                if (btn.textContent.startsWith(correctAnswer + ')')) {
                    btn.classList.add('correct');
                }
            });

            const currentPlayer = gameState.players[gameState.currentPlayer];
            if (isCorrect) {
                currentPlayer.score += 10;
            } else {
                currentPlayer.score -= 5;
            }
            
            document.getElementById(`player${gameState.currentPlayer}-score`).textContent = currentPlayer.score;

            setTimeout(() => {
                nextQuestion();
            }, 2000);
        }

        function nextQuestion() {
            gameState.currentQuestion++;
            loadNextQuestion();
        }

        // Timer
        function startTimer() {
            gameState.timeLeft = 15;
            gameState.gameActive = true;
            updateTimerBar();

            gameState.timer = setInterval(() => {
                gameState.timeLeft--;
                updateTimerBar();

                if (gameState.timeLeft <= 5 && gameState.timeLeft > 0) {
                    if (soundSystem) soundSystem.playTickSound();
                }

                if (gameState.timeLeft <= 0) {
                    clearInterval(gameState.timer);
                    if (soundSystem) soundSystem.playTimeUpSound();
                    timeUp();
                }
            }, 1000);
        }

        function updateTimerBar() {
            const percentage = (gameState.timeLeft / 15) * 100;
            document.getElementById('timer-fill').style.width = percentage + '%';
        }

        function timeUp() {
            gameState.gameActive = false;
            
            const question = gameState.questions[gameState.currentQuestion];
            document.querySelectorAll('.answer-btn').forEach(btn => {
                btn.onclick = null;
                btn.classList.add('disabled');
                if (btn.textContent.startsWith(question.dogru + ')')) {
                    btn.classList.add('correct');
                }
            });

            setTimeout(() => {
                nextQuestion();
            }, 2000);
        }

        // Oyun bitişi
        function endGame() {
            if (soundSystem) {
                soundSystem.stopBackgroundMusic();
            }

            let highestScore = Math.max(...gameState.players.map(p => p.score));
            let winners = gameState.players.filter(p => p.score === highestScore);
            
            let winnerText;
            if (winners.length === 1) {
                winnerText = `🎉 ${winners[0].name} Kazandı!`;
            } else if (winners.length === gameState.players.length) {
                winnerText = "🤝 Tam Beraberlik!";
            } else {
                winnerText = `🎉 ${winners.map(w => w.name).join(' & ')} Kazandı!`;
            }

            if (soundSystem) {
                setTimeout(() => soundSystem.playVictorySound(), 500);
            }

            createResultScreen(winnerText, winners.length === 1 ? winners[0] : null);
            saveToLeaderboard(winners.length === 1 ? winners[0] : null);
            showScreen('result-screen');
        }

        function createResultScreen(winnerText, winner) {
            document.getElementById('winner-text').textContent = winnerText;
            document.getElementById('winner-crown').textContent = winner ? '👑' : '🤝';
            
            const finalScores = document.getElementById('final-scores');
            finalScores.innerHTML = '';
            
            const sortedPlayers = [...gameState.players].sort((a, b) => b.score - a.score);
            
            sortedPlayers.forEach(player => {
                const finalScore = document.createElement('div');
                finalScore.className = 'final-score';
                finalScore.innerHTML = `
                    <div class="avatar">${player.character}</div>
                    <div class="name">${player.name}</div>
                    <div class="score">${player.score}</div>
                `;
                finalScores.appendChild(finalScore);
            });
        }

        // Lider tablosu
        function saveToLeaderboard(winner) {
            const today = new Date().toDateString();
            const thisWeek = getWeekString();

            let dailyLeaders = JSON.parse(localStorage.getItem('dailyLeaders') || '{}');
            let weeklyLeaders = JSON.parse(localStorage.getItem('weeklyLeaders') || '{}');

            const gameData = {
                players: gameState.players.map(p => ({ name: p.name, character: p.character, score: p.score })),
                winner: winner ? winner.name : 'Berabere',
                questionCount: gameState.questionCount,
                timestamp: Date.now()
            };

            if (!dailyLeaders[today]) dailyLeaders[today] = [];
            dailyLeaders[today].push(gameData);

            if (!weeklyLeaders[thisWeek]) weeklyLeaders[thisWeek] = [];
            weeklyLeaders[thisWeek].push(gameData);

            if (dailyLeaders[today].length > 10) {
                dailyLeaders[today] = dailyLeaders[today].slice(-10);
            }

            if (weeklyLeaders[thisWeek].length > 50) {
                weeklyLeaders[thisWeek] = weeklyLeaders[thisWeek].slice(-50);
            }

            localStorage.setItem('dailyLeaders', JSON.stringify(dailyLeaders));
            localStorage.setItem('weeklyLeaders', JSON.stringify(weeklyLeaders));
        }

        function displayLeaderboard() {
            const today = new Date().toDateString();
            const thisWeek = getWeekString();

            const dailyLeaders = JSON.parse(localStorage.getItem('dailyLeaders') || '{}')[today] || [];
            const weeklyLeaders = JSON.parse(localStorage.getItem('weeklyLeaders') || '{}')[thisWeek] || [];

            const dailyContainer = document.getElementById('daily-leaders');
            dailyContainer.innerHTML = '';
            
            if (dailyLeaders.length === 0) {
                dailyContainer.innerHTML = '<div class="leaderboard-entry">Henüz oyun oynanmadı</div>';
            } else {
                const sortedDaily = [...dailyLeaders].sort((a, b) => {
                    const aMaxScore = Math.max(...a.players.map(p => p.score));
                    const bMaxScore = Math.max(...b.players.map(p => p.score));
                    return bMaxScore - aMaxScore;
                }).slice(0, 5);

                sortedDaily.forEach((game, index) => {
                    const maxScore = Math.max(...game.players.map(p => p.score));
                    const topPlayer = game.players.find(p => p.score === maxScore);
                    
                    const entry = document.createElement('div');
                    entry.className = 'leaderboard-entry';
                    entry.innerHTML = `
                        <div>
                            <span class="trophy">${index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🏆'}</span>
                            <strong>${topPlayer.name}</strong> ${topPlayer.character}
                            <small>(${game.questionCount} soru)</small>
                        </div>
                        <div><strong>${maxScore}</strong> puan</div>
                    `;
                    dailyContainer.appendChild(entry);
                });
            }

            const weeklyContainer = document.getElementById('weekly-leaders');
            weeklyContainer.innerHTML = '';
            
            if (weeklyLeaders.length === 0) {
                weeklyContainer.innerHTML = '<div class="leaderboard-entry">Henüz oyun oynanmadı</div>';
            } else {
                const sortedWeekly = [...weeklyLeaders].sort((a, b) => {
                    const aMaxScore = Math.max(...a.players.map(p => p.score));
                    const bMaxScore = Math.max(...b.players.map(p => p.score));
                    return bMaxScore - aMaxScore;
                }).slice(0, 10);

                sortedWeekly.forEach((game, index) => {
                    const maxScore = Math.max(...game.players.map(p => p.score));
                    const topPlayer = game.players.find(p => p.score === maxScore);
                    
                    const entry = document.createElement('div');
                    entry.className = 'leaderboard-entry';
                    entry.innerHTML = `
                        <div>
                            <span class="trophy">${index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🏆'}</span>
                            <strong>${topPlayer.name}</strong> ${topPlayer.character}
                            <small>(${game.questionCount} soru)</small>
                        </div>
                        <div><strong>${maxScore}</strong> puan</div>
                    `;
                    weeklyContainer.appendChild(entry);
                });
            }
        }

        // Yardımcı fonksiyonlar
        function getWeekString() {
            const now = new Date();
            const yearStart = new Date(now.getFullYear(), 0, 1);
            const week = Math.ceil(((now - yearStart) / 86400000 + yearStart.getDay() + 1) / 7);
            return `${now.getFullYear()}-W${week}`;
        }

        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function containsBannedWords(text) {
            const normalizedText = text.toLowerCase()
                .replace(/ğ/g, 'g').replace(/ü/g, 'u').replace(/ş/g, 's')
                .replace(/ı/g, 'i').replace(/ö/g, 'o').replace(/ç/g, 'c');
            
            return bannedWords.some(word => normalizedText.includes(word));
        }

        // Event listeners
        document.addEventListener('keydown', (e) => {
            if (document.getElementById('game-screen').classList.contains('active') && gameState.gameActive) {
                if (soundSystem) soundSystem.playClickSound();
                
                if (e.key === '1' || e.key.toLowerCase() === 'a') {
                    document.querySelector('.answer-btn').click();
                } else if (e.key === '2' || e.key.toLowerCase() === 'b') {
                    document.querySelectorAll('.answer-btn')[1].click();
                } else if (e.key === '3' || e.key.toLowerCase() === 'c') {
                    document.querySelectorAll('.answer-btn')[2].click();
                } else if (e.key === '4' || e.key.toLowerCase() === 'd') {
                    document.querySelectorAll('.answer-btn')[3].click();
                }
            }
        });

        document.addEventListener('click', (e) => {
            if ((e.target.classList.contains('btn') || e.target.classList.contains('character') || 
                 e.target.classList.contains('count-btn') || e.target.classList.contains('player-count-btn')) 
                && soundSystem && !gameState.isMuted) {
                soundSystem.playClickSound();
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            console.log('⚽ Futbol Bilgi Arena v2.0 Hazır!');
            
            // Sayfa yüklendiğinde soruları yükle
            loadQuestions();
            
            // Yükleme göstergesi
            const loadingIndicator = document.createElement('div');
            loadingIndicator.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 0, 0, 0.8);
                color: white;
                padding: 20px 30px;
                border-radius: 15px;
                z-index: 10000;
                font-size: 1.2em;
                text-align: center;
            `;
            loadingIndicator.innerHTML = '⚽ Sorular yükleniyor...';
            document.body.appendChild(loadingIndicator);
            
            // 3 saniye sonra kaldır (ya da sorular yüklendiğinde)
            setTimeout(() => {
                loadingIndicator.style.opacity = '0';
                setTimeout(() => loadingIndicator.remove(), 500);
            }, 3000);
        });
    </script>
</body>
</html>