        // Local Game Functions (Existing Code)
        function setupGameSettings() {
            document.querySelectorAll('#settings-screen .count-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    if (soundSystem) soundSystem.playClickSound();
                    document.querySelectorAll('#settings-screen .count-btn').forEach(b => b.classList.remove('selected'));
                    btn.classList.add('selected');
                    gameState.questionCount = parseInt(btn.dataset.count);
                });
            });

            // Setup for waiting room controls
            document.querySelectorAll('#waiting-screen .count-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    if (!gameState.isHost) return;
                    if (soundSystem) soundSystem.playClickSound();
                    document.querySelectorAll('#waiting-screen .count-btn').forEach(b => b.classList.remove('selected'));
                    btn.classList.add('selected');
                });
            });
        }

        function changePlayerCount(delta) {
            if (soundSystem) soundSystem.playClickSound();
            const currentCount = gameState.players.length;
            const newCount = currentCount + delta;
            
            if (newCount < 2 || newCount > 8) return;
            
            if (delta > 0) {
                const newPlayer = {
                    name: '',
                    character: availableCharacters[newCount - 1],
                    score: 0
                };
                gameState.players.push(newPlayer);
            } else {
                gameState.players.pop();
            }
            
            document.getElementById('player-count-display').textContent = gameState.players.length;
        }

        function setupPlayerCards() {
            const playersGrid = document.getElementById('players-grid');
            playersGrid.innerHTML = '';
            
            gameState.players.forEach((player, index) => {
                const playerCard = document.createElement('div');
                playerCard.className = 'player-card';
                playerCard.innerHTML = `
                    ${index > 1 ? '<button class="remove-player" onclick="removePlayer(' + index + ')">×</button>' : ''}
                    <h3>🎯 ${index + 1}. Oyuncu</h3>
                    <input type="text" class="player-input" id="player${index}-name" placeholder="İsim gir..." maxlength="20">
                    <div class="character-grid">
                        ${availableCharacters.map(char => `
                            <div class="character-option ${char === player.character ? 'selected' : ''}" 
                                 onclick="selectCharacter(${index}, '${char}')">${char}</div>
                        `).join('')}
                    </div>
                    <p style="font-size: 0.9em; opacity: 0.7; margin-top: 10px;">Karakter ve isim seç</p>
                `;
                playersGrid.appendChild(playerCard);
            });
            
            updateStartButton();
            
            gameState.players.forEach((_, index) => {
                const nameInput = document.getElementById(`player${index}-name`);
                nameInput.addEventListener('input', () => {
                    validatePlayerName(nameInput);
                    updateStartButton();
                });
            });
        }

        function selectCharacter(playerIndex, character) {
            if (soundSystem) soundSystem.playClickSound();
            
            // Check if character is already taken
            const isTaken = gameState.players.some((player, index) => 
                player.character === character && index !== playerIndex
            );
            
            if (isTaken) {
                alert('Bu karakter zaten seçilmiş!');
                return;
            }
            
            gameState.players[playerIndex].character = character;
            
            // Update UI
            document.querySelectorAll(`#players-grid .player-card:nth-child(${playerIndex + 1}) .character-option`).forEach(option => {
                option.classList.remove('selected');
            });
            
            document.querySelector(`#players-grid .player-card:nth-child(${playerIndex + 1}) .character-option:nth-child(${availableCharacters.indexOf(character) + 1})`).classList.add('selected');
        }

        function removePlayer(index) {
            if (soundSystem) soundSystem.playClickSound();
            if (gameState.players.length <= 2) return;
            
            gameState.players.splice(index, 1);
            setupPlayerCards();
        }

        function validatePlayerName(input) {
            let value = input.value;
            
            // Türkçe karakter normalizasyonu
            const turkishMap = {
                'ş': 's', 'Ş': 'S', 'ı': 'i', 'İ': 'I', 'ç': 'c', 'Ç': 'C',
                'ğ': 'g', 'Ğ': 'G', 'ü': 'u', 'Ü': 'U', 'ö': 'o', 'Ö': 'O'
            };
            
            // Küfür filtresi
            const bannedWords = ['küfür1', 'küfür2']; // Gerçek listede daha fazla olacak
            const normalizedValue = value.toLowerCase().replace(/[şıçğüöŞIÇĞÜÖ]/g, match => turkishMap[match] || match);
            
            const containsBannedWord = bannedWords.some(word => 
                normalizedValue.includes(word.toLowerCase())
            );
            
            if (containsBannedWord) {
                input.style.borderColor = '#ff6b6b';
                input.title = 'Uygunsuz kelime içeriyor';
            } else {
                input.style.borderColor = 'rgba(255, 255, 255, 0.3)';
                input.title = '';
            }
            
            return !containsBannedWord && value.trim().length > 0;
        }

        function updateStartButton() {
            const startBtn = document.getElementById('start-btn');
            let canStart = true;
            
            gameState.players.forEach((_, index) => {
                const nameInput = document.getElementById(`player${index}-name`);
                if (!nameInput || !validatePlayerName(nameInput)) {
                    canStart = false;
                }
            });
            
            startBtn.disabled = !canStart;
        }

        function toggleMute() {
            if (!soundSystem) return;
            
            soundSystem.toggleMute();
            const muteBtn = document.getElementById('mute-btn');
            
            if (gameState.isMuted) {
                muteBtn.textContent = '🔇';
                muteBtn.classList.add('muted');
            } else {
                muteBtn.textContent = '🔊';
                muteBtn.classList.remove('muted');
            }
        }

        // Game Logic
        function startGame() {
            gameState.players.forEach((player, index) => {
                player.name = document.getElementById(`player${index}-name`).value.trim();
                player.score = 0;
            });
            
            gameState.currentQuestion = 0;
            gameState.currentPlayer = 0;
            gameState.questions = shuffleArray([...allQuestions]).slice(0, gameState.questionCount);

            createGameHeader();

            if (soundSystem && !gameState.isMuted) {
                soundSystem.startBackgroundMusic();
            }

            showScreen('game-screen');
            loadNextQuestion();
        }

        function createGameHeader() {
            const gameHeader = document.getElementById('game-header');
            gameHeader.innerHTML = '';
            
            gameState.players.forEach((player, index) => {
                const playerInfo = document.createElement('div');
                playerInfo.className = 'player-info';
                playerInfo.id = `player${index}-info`;
                playerInfo.innerHTML = `
                    <div class="player-avatar">${player.character}</div>
                    <div class="player-details">
                        <h3>${player.name}</h3>
                        <div class="score" id="player${index}-score">0</div>
                    </div>
                `;
                gameHeader.appendChild(playerInfo);
                
                if (index < gameState.players.length - 1) {
                    const vsDivider = document.createElement('div');
                    vsDivider.className = 'vs-divider';
                    vsDivider.textContent = 'VS';
                    gameHeader.appendChild(vsDivider);
                }
            });
            
            const turnIndicator = document.createElement('div');
            turnIndicator.className = 'turn-indicator';
            turnIndicator.id = 'turn-indicator';
            gameHeader.appendChild(turnIndicator);
            
            updateTurnIndicator();
        }

        function updateTurnIndicator() {
            const turnIndicator = document.getElementById('turn-indicator');
            const currentPlayerName = gameState.players[gameState.currentPlayer].name;
            
            gameState.players.forEach((_, index) => {
                const playerInfo = document.getElementById(`player${index}-info`);
                playerInfo.classList.remove('active', 'inactive');
            });
            
            const activePlayerInfo = document.getElementById(`player${gameState.currentPlayer}-info`);
            activePlayerInfo.classList.add('active');
            
            gameState.players.forEach((_, index) => {
                if (index !== gameState.currentPlayer) {
                    document.getElementById(`player${index}-info`).classList.add('inactive');
                }
            });
            
            turnIndicator.innerHTML = `🎯 ${currentPlayerName} Sırası`;
        }

        function loadNextQuestion() {
            if (gameState.currentQuestion >= gameState.questions.length) {
                endGame();
                return;
            }

            const question = gameState.questions[gameState.currentQuestion];
            
            document.getElementById('question-number').textContent = 
                `Soru ${gameState.currentQuestion + 1}/${gameState.questionCount}`;
            document.getElementById('question-text').textContent = question.question;
            
            const answersGrid = document.getElementById('answers-grid');
            answersGrid.innerHTML = '';
            
            question.options.forEach((option, index) => {
                const answerBtn = document.createElement('button');
                answerBtn.className = 'answer-btn';
                answerBtn.textContent = `${String.fromCharCode(65 + index)}) ${option}`;
                answerBtn.onclick = () => selectAnswer(index);
                answersGrid.appendChild(answerBtn);
            });
            
            startTimer();
        }

        function selectAnswer(selectedIndex) {
            if (!gameState.gameActive) return;
            
            const question = gameState.questions[gameState.currentQuestion];
            const isCorrect = selectedIndex === question.correctAnswer;
            const currentPlayer = gameState.players[gameState.currentPlayer];
            
            // Stop timer
            clearInterval(gameState.timer);
            gameState.gameActive = false;
            
            // Update score
            if (isCorrect) {
                currentPlayer.score += 10;
                if (soundSystem) soundSystem.playCorrectSound();
            } else {
                currentPlayer.score = Math.max(0, currentPlayer.score - 5);
                if (soundSystem) soundSystem.playWrongSound();
            }
            
            // Update UI
            document.getElementById(`player${gameState.currentPlayer}-score`).textContent = currentPlayer.score;
            
            const answerButtons = document.querySelectorAll('.answer-btn');
            answerButtons[selectedIndex].classList.add(isCorrect ? 'correct' : 'wrong');
            answerButtons[question.correctAnswer].classList.add('correct');
            
            answerButtons.forEach(btn => btn.disabled = true);
            
            // Continue to next question after delay
            setTimeout(() => {
                gameState.currentQuestion++;
                gameState.currentPlayer = (gameState.currentPlayer + 1) % gameState.players.length;
                updateTurnIndicator();
                loadNextQuestion();
            }, 2000);
        }

        function startTimer() {
            gameState.timeLeft = 15;
            gameState.gameActive = true;
            
            const timerFill = document.getElementById('timer-fill');
            timerFill.style.width = '100%';
            
            gameState.timer = setInterval(() => {
                gameState.timeLeft--;
                const percentage = (gameState.timeLeft / 15) * 100;
                timerFill.style.width = percentage + '%';
                
                if (gameState.timeLeft <= 5 && gameState.timeLeft > 0) {
                    if (soundSystem) soundSystem.playTimerSound();
                }
                
                if (gameState.timeLeft <= 0) {
                    selectAnswer(-1); // Time's up, wrong answer
                }
            }, 1000);
        }

        function endGame() {
            const maxScore = Math.max(...gameState.players.map(p => p.score));
            const winners = gameState.players.filter(p => p.score === maxScore);
            
            let winnerText;
            if (winners.length === 1) {
                winnerText = `🎉 ${winners[0].name} Kazandı!`;
            } else {
                winnerText = `🎉 ${winners.map(w => w.name).join(' & ')} Kazandı!`;
            }

            if (soundSystem) {
                setTimeout(() => soundSystem.playVictorySound(), 500);
            }

            createResultScreen(winnerText, winners.length === 1 ? winners[0] : null);
            saveToLeaderboard(winners.length === 1 ? winners[0] : null);
            showScreen('result-screen');
        }

        function createResultScreen(winnerText, winner) {
            document.getElementById('winner-text').textContent = winnerText;
            document.getElementById('winner-crown').textContent = winner ? '👑' : '🤝';
            
            const finalScores = document.getElementById('final-scores');
            finalScores.innerHTML = '';
            
            const sortedPlayers = [...gameState.players].sort((a, b) => b.score - a.score);
            
            sortedPlayers.forEach(player => {
                const finalScore = document.createElement('div');
                finalScore.className = 'final-score';
                finalScore.innerHTML = `
                    <div class="avatar">${player.character}</div>
                    <div class="name">${player.name}</div>
                    <div class="score">${player.score}</div>
                `;
                finalScores.appendChild(finalScore);
            });
        }

        function restartGame() {
            if (gameState.isOnline) {
                // For online games, return to waiting room
                leaveRoom();
            } else {
                // For local games, restart with same settings
                showGameSettings();
            }
        }

        // Leaderboard Functions
        function getWeekString() {
            const now = new Date();
            const startOfYear = new Date(now.getFullYear(), 0, 1);
            const weekNumber = Math.ceil(((now - startOfYear) / (24 * 60 * 60 * 1000) + startOfYear.getDay() + 1) / 7);
            return now.getFullYear() + '-W' + weekNumber;
        }

        function saveToLeaderboard(winner) {
            const today = new Date().toDateString();
            const thisWeek = getWeekString();

            let dailyLeaders = JSON.parse(localStorage.getItem('dailyLeaders') || '{}');
            let weeklyLeaders = JSON.parse(localStorage.getItem('weeklyLeaders') || '{}');

            const gameData = {
                players: gameState.players.map(p => ({ name: p.name, character: p.character, score: p.score })),
                winner: winner ? winner.name : 'Berabere',
                questionCount: gameState.questionCount,
                timestamp: Date.now()
            };

            if (!dailyLeaders[today]) dailyLeaders[today] = [];
            dailyLeaders[today].push(gameData);

            if (!weeklyLeaders[thisWeek]) weeklyLeaders[thisWeek] = [];
            weeklyLeaders[thisWeek].push(gameData);

            if (dailyLeaders[today].length > 10) {
                dailyLeaders[today] = dailyLeaders[today].slice(-10);
            }

            if (weeklyLeaders[thisWeek].length > 50) {
                weeklyLeaders[thisWeek] = weeklyLeaders[thisWeek].slice(-50);
            }

            localStorage.setItem('dailyLeaders', JSON.stringify(dailyLeaders));
            localStorage.setItem('weeklyLeaders', JSON.stringify(weeklyLeaders));
        }

        function displayLeaderboard() {
            const today = new Date().toDateString();
            const thisWeek = getWeekString();

            const dailyLeaders = JSON.parse(localStorage.getItem('dailyLeaders') || '{}')[today] || [];
            const weeklyLeaders = JSON.parse(localStorage.getItem('weeklyLeaders') || '{}')[thisWeek] || [];

            const dailyContainer = document.getElementById('daily-leaders');
            dailyContainer.innerHTML = '';
            
            if (dailyLeaders.length === 0) {
                dailyContainer.innerHTML = '<div class="leaderboard-entry">Henüz oyun oynanmadı</div>';
            } else {
                const sortedDaily = [...dailyLeaders].sort((a, b) => {
                    const aMaxScore = Math.max(...a.players.map(p => p.score));
                    const bMaxScore = Math.max(...b.players.map(p => p.score));
                    return bMaxScore - aMaxScore;
                }).slice(0, 5);

                sortedDaily.forEach((game, index) => {
                    const maxScore = Math.max(...game.players.map(p => p.score));
                    const topPlayer = game.players.find(p => p.score === maxScore);
                    
                    const entry = document.createElement('div');
                    entry.className = 'leaderboard-entry';
                    entry.innerHTML = `
                        <div>
                            <span class="trophy">${index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🏆'}</span>
                            <strong>${topPlayer.name}</strong> ${topPlayer.character}
                            <small>(${game.questionCount} soru)</small>
                        </div>
                        <div><strong>${maxScore}</strong> puan</div>
                    `;
                    dailyContainer.appendChild(entry);
                });
            }

            const weeklyContainer = document.getElementById('weekly-leaders');
            weeklyContainer.innerHTML = '';
            
            if (weeklyLeaders.length === 0) {
                weeklyContainer.innerHTML = '<div class="leaderboard-entry">Henüz oyun oynanmadı</div>';
            } else {
                const sortedWeekly = [...weeklyLeaders].sort((a, b) => {
                    const aMaxScore = Math.max(...a.players.map(p => p.score));
                    const bMaxScore = Math.max(...b.players.map(p => p.score));
                    return bMaxScore - aMaxScore;
                }).slice(0, 10);

                sortedWeekly.forEach((game, index) => {
                    const maxScore = Math.max(...game.players.map(p => p.score));
                    const topPlayer = game.players.find(p => p.score === maxScore);
                    
                    const entry = document.createElement('div');
                    entry.className = 'leaderboard-entry';
                    entry.innerHTML = `
                        <div>
                            <span class="trophy">${index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🏆'}</span>
                            <strong>${topPlayer.name}</strong> ${topPlayer.character}
                            <small>(${game.questionCount} soru)</small>
                        </div>
                        <div><strong>${maxScore}</strong> puan</div>
                    `;
                    weeklyContainer.appendChild(entry);
                });
            }
        }

        // Utility Functions
        function shuffleArray(array) {
            const newArray = [...array];
            for (let i = newArray.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
            }
            return newArray;
        }

        // Load Questions
        async function loadQuestions() {
            try {
                const response = await fetch('./sorular.json');
                if (!response.ok) {
                    throw new Error('Sorular yüklenemedi');
                }
                const data = await response.json();
                allQuestions = data.questions || [];
                
                if (allQuestions.length === 0) {
                    throw new Error('Soru listesi boş');
                }
                
                console.log(`${allQuestions.length} soru yüklendi`);
                
            } catch (error) {
                console.error('Questions loading error:', error);
                
                // Fallback questions
                allQuestions = [
                    {
                        question: "Hangi takım 2018 FIFA Dünya Kupası'nı kazanmıştır?",
                        options: ["Fransa", "Hırvatistan", "Belçika", "İngiltere"],
                        correctAnswer: 0
                    },
                    {
                        question: "Lionel Messi hangi ülke milli takımında oynamaktadır?",
                        options: ["İspanya", "Arjantin", "Brezilya", "Portekiz"],
                        correctAnswer: 1
                    },
                    {
                        question: "Real Madrid'in stadyumunun adı nedir?",
                        options: ["Camp Nou", "Wembley", "Santiago Bernabéu", "Old Trafford"],
                        correctAnswer: 2
                    },
                    {
                        question: "UEFA Şampiyonlar Ligi'ni en çok hangi takım kazanmıştır?",
                        options: ["Barcelona", "Real Madrid", "AC Milan", "Liverpool"],
                        correctAnswer: 1
                    },
                    {
                        question: "Futbolda penaltı noktası kalede kaç metre uzaklıktadır?",
                        options: ["10 metre", "11 metre", "12 metre", "9 metre"],
                        correctAnswer: 1
                    }
                ];
                
                console.log('Fallback sorular yüklendi');
            }
        }

        // Initialize Application
        async function initApp() {
            console.log('Futbol Bilgi Arena v2.0 - Firebase Multiplayer');
            console.log('Geliştirici: Aras Gaygusuz - ArsanaGames');
            
            // Load questions first
            await loadQuestions();
            
            // Initialize Firebase
            initializeFirebase();
            
            // Setup initial UI
            setupGameSettings();
            
            // Show initial screen
            showScreen('menu-screen');
            
            console.log('Uygulama başlatıldı!');
        }

        // Start the application
        window.addEventListener('DOMContentLoaded', initApp);

        // Handle page unload for online games
        window.addEventListener('beforeunload', (e) => {
            if (gameState.isOnline && roomRef) {
                // Quick cleanup for online games
                leaveRoom();
            }
        });

        // Handle visibility change for connection management
        document.addEventListener('visibilitychange', () => {
            if (gameState.isOnline && roomRef) {
                if (document.hidden) {
                    // Tab/window is hidden
                    roomRef.child('players/' + gameState.playerId + '/connected').set(false);
                } else {
                    // Tab/window is visible
                    roomRef.child('players/' + gameState.playerId + '/connected').set(true);
                }
            }
        });

    </script>
</body>
</html>
                    <!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>⚽ Futbol Bilgi Arena - ArsanaGames | En İyi Online Futbol Yarışması</title>
    
    <!-- SEO Meta Tags -->
    <meta name="description" content="ArsanaGames tarafından geliştirilen eğlenceli futbol bilgi yarışması! 2-8 oyuncu, 500+ soru, çok oyunculu mod. Aras Gaygusuz imzası ile ücretsiz oyna!">
    <meta name="keywords" content="ArsanaGames, Arsana Games, Arsana, Aras Gaygusuz, futbol bilgi yarışması, futbol quiz, online futbol oyunu, çok oyunculu futbol, futbol soruları, futbol bilgi testi, ücretsiz futbol oyunu, browser game, futbol arena">
    <meta name="author" content="Aras Gaygusuz - ArsanaGames">
    <meta name="robots" content="index, follow">
    <meta name="language" content="Turkish">
    
    <!-- Open Graph Meta Tags (Social Media) -->
    <meta property="og:title" content="⚽ Futbol Bilgi Arena - ArsanaGames">
    <meta property="og:description" content="En eğlenceli futbol bilgi yarışması! 8 oyuncuya kadar çok oyunculu mod, 500+ soru ve harika ses efektleri. Aras Gaygusuz imzası ile ücretsiz!">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://bayramgaygusuz.github.io/aras/">
    <meta property="og:site_name" content="ArsanaGames">
    <meta property="og:locale" content="tr_TR">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="⚽ Futbol Bilgi Arena - ArsanaGames">
    <meta name="twitter:description" content="En eğlenceli futbol bilgi yarışması! Çok oyunculu mod, 500+ soru. Aras Gaygusuz imzası ile ücretsiz oyna!">
    
    <!-- Schema.org Structured Data -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "Game",
        "name": "Futbol Bilgi Arena",
        "description": "ArsanaGames tarafından geliştirilen eğlenceli futbol bilgi yarışması! 2-8 oyuncu, 500+ soru, çok oyunculu mod.",
        "author": {
            "@type": "Person",
            "name": "Aras Gaygusuz"
        },
        "publisher": {
            "@type": "Organization", 
            "name": "ArsanaGames"
        },
        "url": "https://bayramgaygusuz.github.io/aras/",
        "genre": "Quiz Game",
        "gamePlatform": "Web Browser",
        "numberOfPlayers": "2-8",
        "inLanguage": "tr"
    }
    </script>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-database-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-auth-compat.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(-45deg, #1e3c72, #2a5298, #00c9ff, #92fe9d);
            background-size: 400% 400%;
            animation: gradientShift 8s ease infinite;
            min-height: 100vh;
            color: white;
            overflow-x: hidden;
        }

        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .screen {
            min-height: 100vh;
            display: none;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .screen.active {
            display: flex;
            flex-direction: column;
        }

        .logo {
            font-size: 4em;
            text-align: center;
            margin-bottom: 30px;
            animation: logoFloat 3s ease-in-out infinite;
            text-shadow: 0 0 30px rgba(255, 255, 255, 0.5);
        }

        @keyframes logoFloat {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }

        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin: 20px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .btn {
            background: linear-gradient(45deg, #00c9ff, #92fe9d);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 10px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            text-transform: uppercase;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* YENI: Online/Room Seçimi */
        .game-mode-selector {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            max-width: 800px;
            margin: 0 auto;
        }

        .mode-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 30px;
            border-radius: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .mode-card:hover {
            transform: scale(1.05);
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.2);
        }

        .mode-icon {
            font-size: 4em;
            margin-bottom: 20px;
        }

        .mode-title {
            font-size: 1.8em;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .mode-description {
            font-size: 1em;
            opacity: 0.8;
            line-height: 1.4;
        }

        /* YENI: Room Management */
        .room-section {
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
        }

        .room-input {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            padding: 15px 20px;
            font-size: 1.2em;
            color: white;
            text-align: center;
            width: 100%;
            margin: 15px 0;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .room-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .room-code-display {
            background: linear-gradient(45deg, #00ff88, #00d4aa);
            padding: 20px;
            border-radius: 15px;
            font-size: 2em;
            font-weight: bold;
            letter-spacing: 3px;
            margin: 20px 0;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .players-waiting {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            min-height: 200px;
        }

        .waiting-player {
            display: flex;
            align-items: center;
            padding: 15px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            margin: 10px 0;
            gap: 15px;
        }

        .host-badge {
            background: linear-gradient(45deg, #ffd93d, #ff6b6b);
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: bold;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 10px;
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 20px;
            border-radius: 25px;
            z-index: 1000;
        }

        .connection-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff6b6b;
            animation: pulse 2s ease-in-out infinite;
        }

        .connection-dot.connected {
            background: #00ff88;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        /* Mevcut stiller devam ediyor... */
        .game-settings {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            max-width: 800px;
            margin: 0 auto;
        }

        .setting-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .question-count-selector {
            display: flex;
            gap: 15px;
            margin: 15px 0;
            justify-content: center;
        }

        .count-btn {
            padding: 15px 25px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 15px;
            color: white;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .count-btn.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.3);
            transform: scale(1.1);
        }

        .player-count-selector {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
        }

        .player-count-btn {
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .player-count-display {
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
            min-width: 60px;
            text-align: center;
        }

        .players-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .player-card {
            position: relative;
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .character-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin: 15px 0;
        }

        .character-option {
            padding: 10px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
            text-align: center;
            font-size: 1.8em;
        }

        .character-option.selected {
            border-color: #00ff88;
            background: rgba(0, 255, 136, 0.3);
            transform: scale(1.1);
        }

        .player-input {
            width: 100%;
            padding: 15px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: white;
            font-size: 1.2em;
            margin: 10px 0;
        }

        .player-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .remove-player {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255, 107, 107, 0.8);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            font-size: 1.2em;
            transition: all 0.3s ease;
        }

        .remove-player:hover {
            transform: scale(1.2);
        }

        .mute-button {
            position: fixed;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            cursor: pointer;
            font-size: 1.5em;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .mute-button:hover {
            background: rgba(0, 0, 0, 0.9);
            transform: scale(1.1);
        }

        .mute-button.muted {
            background: rgba(255, 107, 107, 0.8);
        }

        .game-screen {
            max-width: 1000px;
            margin: 0 auto;
        }

        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            flex-wrap: wrap;
            gap: 15px;
        }

        .player-info {
            display: flex;
            align-items: center;
            gap: 15px;
            transition: all 0.5s ease;
            padding: 20px;
            border-radius: 20px;
            border: 3px solid transparent;
        }

        .player-info.active {
            transform: scale(1.1);
            background: rgba(255, 255, 255, 0.2);
            border-color: #00ff88;
            box-shadow: 0 0 30px rgba(0, 255, 136, 0.5);
            animation: activePlayerPulse 2s ease-in-out infinite;
        }

        .player-info.inactive {
            opacity: 0.6;
            transform: scale(0.95);
        }

        @keyframes activePlayerPulse {
            0%, 100% { box-shadow: 0 0 30px rgba(0, 255, 136, 0.5); }
            50% { box-shadow: 0 0 50px rgba(0, 255, 136, 0.8); }
        }

        .turn-indicator {
            position: absolute;
            top: -50px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(45deg, #ff6b6b, #ffd93d);
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.5em;
            font-weight: bold;
            animation: turnBounce 1s ease-in-out infinite;
            box-shadow: 0 5px 20px rgba(255, 107, 107, 0.4);
        }

        @keyframes turnBounce {
            0%, 100% { transform: translateX(-50%) translateY(0); }
            50% { transform: translateX(-50%) translateY(-10px); }
        }

        .player-avatar {
            font-size: 2.5em;
            background: rgba(255, 255, 255, 0.2);
            padding: 15px;
            border-radius: 50%;
        }

        .player-details h3 {
            font-size: 1.5em;
            margin-bottom: 5px;
        }

        .score {
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
        }

        .vs-divider {
            font-size: 1.5em;
            font-weight: bold;
            color: #ffd93d;
            padding: 10px;
            text-shadow: 0 2px 10px rgba(255, 217, 61, 0.5);
        }

        .question-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 30px;
            border-radius: 20px;
            margin: 20px 0;
            text-align: center;
        }

        .question-number {
            font-size: 1.2em;
            color: #ffd93d;
            margin-bottom: 20px;
        }

        .question-text {
            font-size: 1.8em;
            margin-bottom: 30px;
            line-height: 1.4;
        }

        .answers-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            max-width: 800px;
            margin: 0 auto;
        }

        .answer-btn {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 20px;
            border-radius: 15px;
            font-size: 1.2em;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: left;
        }

        .answer-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.05);
        }

        .answer-btn.correct {
            background: rgba(0, 255, 136, 0.3);
            border-color: #00ff88;
            animation: correctAnswer 0.6s ease;
        }

        .answer-btn.wrong {
            background: rgba(255, 107, 107, 0.3);
            border-color: #ff6b6b;
            animation: wrongAnswer 0.6s ease;
        }

        @keyframes correctAnswer {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        @keyframes wrongAnswer {
            0% { transform: translateX(0); }
            25% { transform: translateX(-10px); }
            75% { transform: translateX(10px); }
            100% { transform: translateX(0); }
        }

        .timer-bar {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            margin: 20px 0;
            overflow: hidden;
        }

        .timer-fill {
            height: 100%;
            background: linear-gradient(90deg, #00ff88, #ffd93d, #ff6b6b);
            border-radius: 10px;
            transition: width 1s linear;
            animation: timerPulse 1s ease-in-out infinite;
        }

        @keyframes timerPulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .result-screen {
            text-align: center;
            max-width: 800px;
            margin: 0 auto;
        }

        .winner-crown {
            font-size: 8em;
            animation: crownRotate 3s ease-in-out infinite;
            margin: 20px 0;
        }

        @keyframes crownRotate {
            0%, 100% { transform: rotate(0deg); }
            25% { transform: rotate(-10deg); }
            75% { transform: rotate(10deg); }
        }

        .final-scores {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 30px;
            margin: 30px 0;
        }

        .final-score {
            display: flex;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            gap: 20px;
        }

        .final-score .avatar {
            font-size: 2em;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px;
            border-radius: 50%;
        }

        .final-score .name {
            flex: 1;
            font-size: 1.5em;
            text-align: left;
        }

        .final-score .score {
            font-size: 2em;
            font-weight: bold;
            color: #00ff88;
        }

        .leaderboard-section {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            max-width: 1000px;
            margin: 0 auto;
        }

        .leaderboard-card {
            background: rgba(255, 255, 255, 0.15);
            padding: 25px;
            border-radius: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .leaderboard-entry {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        .trophy {
            margin-right: 15px;
            font-size: 1.5em;
        }

        @media (max-width: 768px) {
            .logo {
                font-size: 2.5em;
            }

            .game-settings {
                grid-template-columns: 1fr;
            }

            .game-mode-selector {
                grid-template-columns: 1fr;
            }

            .answers-grid {
                grid-template-columns: 1fr;
            }

            .question-text {
                font-size: 1.4em;
            }

            .game-header {
                flex-direction: column;
            }

            .leaderboard-section {
                grid-template-columns: 1fr;
            }

            .turn-indicator {
                position: relative;
                top: 0;
                transform: none;
                margin-bottom: 20px;
            }
        }
    </style>
</head>
<body>
    <!-- Connection Status -->
    <div class="connection-status" id="connection-status">
        <div class="connection-dot" id="connection-dot"></div>
        <span id="connection-text">Bağlantı Kontrol Ediliyor...</span>
    </div>

    <!-- Ana Menü -->
    <div id="menu-screen" class="screen active">
        <div class="logo">⚽ Futbol Bilgi Arena</div>
        <div class="card">
            <h2 style="text-align: center; margin-bottom: 20px;">🎮 ArsanaGames</h2>
            <p style="text-align: center; margin-bottom: 30px; opacity: 0.8;">Aras Gaygusuz imzası ile en eğlenceli futbol bilgi yarışması!</p>
            <button class="btn" onclick="showGameModeSelection()">🚀 OYUNA BAŞLA</button>
            <button class="btn" onclick="showLeaderboard()">🏆 LİDER TABLOSU</button>
        </div>
    </div>

    <!-- YENI: Game Mode Selection -->
    <div id="gamemode-screen" class="screen">
        <div class="logo">🎮 Oyun Modu Seçimi</div>
        <div class="card">
            <div class="game-mode-selector">
                <div class="mode-card" onclick="selectLocalMode()">
                    <div class="mode-icon">🏠</div>
                    <div class="mode-title">Yerel Oyun</div>
                    <div class="mode-description">Aynı cihazda arkadaşlarınla birlikte oyna. Hızlı ve eğlenceli!</div>
                </div>
                <div class="mode-card" onclick="selectOnlineMode()">
                    <div class="mode-icon">🌐</div>
                    <div class="mode-title">Online Oyun</div>
                    <div class="mode-description">Farklı cihazlardan arkadaşlarınla gerçek zamanlı oyna!</div>
                </div>
            </div>
            <button class="btn" onclick="showMenu()">🔙 GERİ</button>
        </div>
    </div>

    <!-- YENI: Online Room Selection -->
    <div id="online-screen" class="screen">
        <div class="logo">🌐 Online Oyun</div>
        <div class="card">
            <div class="room-section">
                <h2 style="margin-bottom: 30px;">Oda Seçimi</h2>
                
                <button class="btn" onclick="createRoom()" style="width: 100%; margin: 15px 0;">🏆 ODA OLUŞTUR</button>
                
                <div style="margin: 30px 0; opacity: 0.6;">
                    <hr style="border: 1px solid rgba(255,255,255,0.3);">
                    <p style="margin: 15px 0;">veya</p>
                    <hr style="border: 1px solid rgba(255,255,255,0.3);">
                </div>

                <input type="text" class="room-input" id="room-code-input" placeholder="ODA KODUNU GİR" maxlength="6">
                <button class="btn" onclick="joinRoom()" style="width: 100%; margin: 15px 0;">🚀 ODAYA KATIL</button>
            </div>
            <button class="btn" onclick="showGameModeSelection()">🔙 GERİ</button>
        </div>
    </div>

    <!-- YENI: Room Waiting Area -->
    <div id="waiting-screen" class="screen">
        <div class="logo">⏳ Oyuncular Bekleniyor</div>
        <div class="card">
            <div class="room-section">
                <h2>Oda Kodu</h2>
                <div class="room-code-display" id="room-code-display">ABC123</div>
                
                <div class="players-waiting" id="players-waiting">
                    <h3 style="margin-bottom: 20px;">Oyuncular (<span id="player-count-waiting">1</span>/8)</h3>
                    <div id="waiting-players-list"></div>
                </div>

                <div id="host-controls" style="display: none;">
                    <div class="game-settings" style="margin: 30px 0;">
                        <div class="setting-card">
                            <h3>📊 Soru Sayısı</h3>
                            <div class="question-count-selector">
                                <div class="count-btn selected" data-count="10">10</div>
                                <div class="count-btn" data-count="20">20</div>
                                <div class="count-btn" data-count="30">30</div>
                            </div>
                        </div>
                        <div class="setting-card">
                            <h3>⚽ Oyun Bilgileri</h3>
                            <p><small>✅ Skor: Doğru +10, Yanlış -5</small></p>
                            <p><small>⏱️ Süre: Her soru 15 saniye</small></p>
                            <p><small>🎯 2-8 oyuncu arası</small></p>
                        </div>
                    </div>
                    <button class="btn" onclick="startOnlineGame()" id="start-online-btn" disabled>⚽ MAÇA BAŞLA!</button>
                </div>
                
                <button class="btn" onclick="leaveRoom()">🚪 ODADAN ÇIKIS</button>
            </div>
        </div>
    </div>

    <!-- Oyun Ayarları (Local Mode) -->
    <div id="settings-screen" class="screen">
        <div class="logo">⚙️ Oyun Ayarları</div>
        <div class="card">
            <div class="game-settings">
                <div class="setting-card">
                    <h3>📊 Soru Sayısı</h3>
                    <div class="question-count-selector">
                        <div class="count-btn selected" data-count="10">10</div>
                        <div class="count-btn" data-count="20">20</div>
                        <div class="count-btn" data-count="30">30</div>
                    </div>
                </div>
                <div class="setting-card">
                    <h3>👥 Oyuncu Sayısı</h3>
                    <div class="player-count-selector">
                        <button class="player-count-btn" onclick="changePlayerCount(-1)">−</button>
                        <div class="player-count-display" id="player-count-display">2</div>
                        <button class="player-count-btn" onclick="changePlayerCount(1)">+</button>
                    </div>
                    <p><small>2-8 oyuncu arası</small></p>
                </div>
            </div>
            <div class="setting-card">
                <h3>⚽ Oyun Bilgileri</h3>
                <p><small>✅ Skor: Doğru +10, Yanlış -5</small></p>
                <p><small>⏱️ Süre: Her soru 15 saniye</small></p>
                <p><small>2-8 oyuncu arası</small></p>
            </div>
            <button class="btn" onclick="showPlayerSetup()">✅ AYARLARI ONAYLA</button>
            <button class="btn" onclick="showGameModeSelection()">🔙 GERİ</button>
        </div>
    </div>

    <!-- Oyuncu Kurulumu -->
    <div id="setup-screen" class="screen">
        <div class="logo">⚽ Oyuncu Seçimi</div>
        <div class="card">
            <div class="players-grid" id="players-grid">
                <!-- Oyuncular dinamik olarak eklenecek -->
            </div>
            <button class="btn" onclick="startGame()" id="start-btn" disabled>⚽ MAÇA BAŞLA!</button>
            <button class="btn" onclick="showGameSettings()">🔙 GERİ</button>
        </div>
    </div>

    <!-- Oyun Ekranı -->
    <div id="game-screen" class="screen">
        <button class="mute-button" id="mute-btn" onclick="toggleMute()">🔊</button>
        <div class="game-screen">
            <div class="game-header" id="game-header">
                <!-- Oyuncular dinamik olarak eklenecek -->
            </div>

            <div class="timer-bar">
                <div class="timer-fill" id="timer-fill"></div>
            </div>

            <div class="question-card">
                <div class="question-number" id="question-number">Soru 1/10</div>
                <div class="question-text" id="question-text">Soru yükleniyor...</div>
                <div class="answers-grid" id="answers-grid">
                    <!-- Cevap seçenekleri buraya gelecek -->
                </div>
            </div>
        </div>
    </div>

    <!-- Sonuç Ekranı -->
    <div id="result-screen" class="screen">
        <div class="result-screen">
            <div class="winner-crown" id="winner-crown">👑</div>
            <h1 id="winner-text">KAZANAN!</h1>
            <div class="final-scores" id="final-scores">
                <!-- Final skorları dinamik olarak eklenecek -->
            </div>
            <button class="btn" onclick="showMenu()">🏠 ANA MENÜ</button>
            <button class="btn" onclick="restartGame()">🔄 YENİDEN OYNA</button>
        </div>
    </div>

    <!-- Lider Tablosu -->
    <div id="leaderboard-screen" class="screen">
        <div class="logo">🏆 Lider Tablosu</div>
        <div class="card">
            <div class="leaderboard-section">
                <div class="leaderboard-card">
                    <h3>🌅 Günlük Liderler</h3>
                    <div id="daily-leaders"></div>
                </div>
                <div class="leaderboard-card">
                    <h3>📅 Haftalık Liderler</h3>
                    <div id="weekly-leaders"></div>
                </div>
            </div>
            <button class="btn" onclick="showMenu()">🔙 GERİ</button>
        </div>
    </div>

    <script>
        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyCmq9chB7o-n3k32OkR9TVga56_QV8vm1A",
            authDomain: "futbol-bilgi-arena.firebaseapp.com",
            databaseURL: "https://futbol-bilgi-arena-default-rtdb.europe-west1.firebasedatabase.app",
            projectId: "futbol-bilgi-arena",
            storageBucket: "futbol-bilgi-arena.firebasestorage.app",
            messagingSenderId: "606664987575",
            appId: "1:606664987575:web:656c192b71b912a9a4ce32",
            measurementId: "G-PNBD9J1RN3"
        };

        // Initialize Firebase
        let firebaseApp, database, auth;
        let isFirebaseInitialized = false;

        function initializeFirebase() {
            try {
                firebaseApp = firebase.initializeApp(firebaseConfig);
                database = firebase.database();
                auth = firebase.auth();
                isFirebaseInitialized = true;
                updateConnectionStatus(true, "Firebase'e Bağlandı");
                console.log("Firebase initialized successfully");
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                updateConnectionStatus(false, "Bağlantı Hatası");
            }
        }

        // Game State
        let gameState = {
            isOnline: false,
            roomCode: null,
            isHost: false,
            playerId: null,
            players: [
                {name: '', character: '⚽', score: 0},
                {name: '', character: '🏆', score: 0}
            ],
            currentQuestion: 0,
            currentPlayer: 0,
            questionCount: 10,
            questions: [],
            isMuted: false,
            timer: null,
            timeLeft: 15,
            gameActive: false
        };

        // Room Management
        let roomRef = null;
        let playersRef = null;
        let gameRef = null;

        // Connection Status Management
        function updateConnectionStatus(connected, message) {
            const dot = document.getElementById('connection-dot');
            const text = document.getElementById('connection-text');
            
            if (connected) {
                dot.classList.add('connected');
                text.textContent = message || 'Bağlandı';
            } else {
                dot.classList.remove('connected');
                text.textContent = message || 'Bağlantı Kesildi';
            }
        }

        // Available Characters
        const availableCharacters = ['⚽', '🏆', '👑', '🎯', '🔥', '⭐', '💎', '🚀'];

        // Questions Array
        let allQuestions = [];

        // Sound System
        class SoundSystem {
            constructor() {
                this.audioContext = null;
                this.backgroundMusic = null;
                this.sounds = {};
                this.isMuted = false;
                this.init();
            }

            async init() {
                try {
                    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    await this.createSounds();
                } catch (error) {
                    console.warn('Sound system initialization failed:', error);
                }
            }

            async createSounds() {
                const soundConfigs = {
                    click: { frequency: 800, duration: 0.1, type: 'sine' },
                    correct: { frequency: 1200, duration: 0.3, type: 'sine' },
                    wrong: { frequency: 300, duration: 0.5, type: 'sawtooth' },
                    timer: { frequency: 400, duration: 0.1, type: 'square' },
                    victory: { frequency: 1000, duration: 0.8, type: 'sine' }
                };

                for (const [name, config] of Object.entries(soundConfigs)) {
                    this.sounds[name] = config;
                }
            }

            playSound(soundName) {
                if (this.isMuted || !this.audioContext) return;
                
                const config = this.sounds[soundName];
                if (!config) return;

                const oscillator = this.audioContext.createOscillator();
                const gainNode = this.audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(this.audioContext.destination);
                
                oscillator.type = config.type;
                oscillator.frequency.setValueAtTime(config.frequency, this.audioContext.currentTime);
                
                gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + config.duration);
                
                oscillator.start();
                oscillator.stop(this.audioContext.currentTime + config.duration);
            }

            playClickSound() { this.playSound('click'); }
            playCorrectSound() { this.playSound('correct'); }
            playWrongSound() { this.playSound('wrong'); }
            playTimerSound() { this.playSound('timer'); }
            playVictorySound() { this.playSound('victory'); }

            toggleMute() {
                this.isMuted = !this.isMuted;
                gameState.isMuted = this.isMuted;
                return this.isMuted;
            }

            startBackgroundMusic() {
                // Background music implementation
            }
        }

        let soundSystem = new SoundSystem();

        // Screen Management
        function showScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
            });
            document.getElementById(screenId).classList.add('active');
        }

        function showMenu() {
            showScreen('menu-screen');
        }

        function showGameModeSelection() {
            showScreen('gamemode-screen');
        }

        function selectLocalMode() {
            if (soundSystem) soundSystem.playClickSound();
            gameState.isOnline = false;
            showGameSettings();
        }

        function selectOnlineMode() {
            if (soundSystem) soundSystem.playClickSound();
            
            if (!isFirebaseInitialized) {
                alert('Firebase bağlantısı kurulamadı. Lütfen sayfayı yenileyin.');
                return;
            }
            
            gameState.isOnline = true;
            showScreen('online-screen');
        }

        function showGameSettings() {
            showScreen('settings-screen');
            setupGameSettings();
        }

        function showPlayerSetup() {
            showScreen('setup-screen');
            setupPlayerCards();
        }

        function showLeaderboard() {
            showScreen('leaderboard-screen');
            displayLeaderboard();
        }

        // Online Room Management
        function generateRoomCode() {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let result = '';
            for (let i = 0; i < 6; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        }

        async function createRoom() {
            if (soundSystem) soundSystem.playClickSound();
            
            if (!isFirebaseInitialized) {
                alert('Firebase bağlantısı kurulamadı!');
                return;
            }

            try {
                // Anonymous authentication
                await auth.signInAnonymously();
                gameState.playerId = auth.currentUser.uid;
                
                gameState.roomCode = generateRoomCode();
                gameState.isHost = true;
                
                // Create room in Firebase
                roomRef = database.ref('rooms/' + gameState.roomCode);
                
                const roomData = {
                    host: gameState.playerId,
                    questionCount: 10,
                    gameStarted: false,
                    createdAt: firebase.database.ServerValue.TIMESTAMP,
                    players: {
                        [gameState.playerId]: {
                            name: '',
                            character: '⚽',
                            score: 0,
                            isHost: true,
                            connected: true,
                            joinedAt: firebase.database.ServerValue.TIMESTAMP
                        }
                    }
                };
                
                await roomRef.set(roomData);
                
                // Setup room listeners
                setupRoomListeners();
                
                // Show waiting screen
                document.getElementById('room-code-display').textContent = gameState.roomCode;
                showScreen('waiting-screen');
                document.getElementById('host-controls').style.display = 'block';
                
                updateWaitingRoom();
                
            } catch (error) {
                console.error('Error creating room:', error);
                alert('Oda oluşturulurken hata oluştu: ' + error.message);
            }
        }

        async function joinRoom() {
            if (soundSystem) soundSystem.playClickSound();
            
            const roomCodeInput = document.getElementById('room-code-input');
            const roomCode = roomCodeInput.value.trim().toUpperCase();
            
            if (!roomCode || roomCode.length !== 6) {
                alert('Lütfen geçerli bir oda kodu girin!');
                return;
            }

            if (!isFirebaseInitialized) {
                alert('Firebase bağlantısı kurulamadı!');
                return;
            }

            try {
                // Anonymous authentication
                await auth.signInAnonymously();
                gameState.playerId = auth.currentUser.uid;
                
                gameState.roomCode = roomCode;
                gameState.isHost = false;
                
                // Check if room exists
                roomRef = database.ref('rooms/' + roomCode);
                const roomSnapshot = await roomRef.once('value');
                
                if (!roomSnapshot.exists()) {
                    alert('Oda bulunamadı! Lütfen oda kodunu kontrol edin.');
                    return;
                }
                
                const roomData = roomSnapshot.val();
                
                if (roomData.gameStarted) {
                    alert('Bu oda zaten oyun başlamış!');
                    return;
                }
                
                const playerCount = Object.keys(roomData.players || {}).length;
                if (playerCount >= 8) {
                    alert('Oda dolu! (Maksimum 8 oyuncu)');
                    return;
                }
                
                // Add player to room
                const playerData = {
                    name: '',
                    character: availableCharacters[playerCount],
                    score: 0,
                    isHost: false,
                    connected: true,
                    joinedAt: firebase.database.ServerValue.TIMESTAMP
                };
                
                await roomRef.child('players/' + gameState.playerId).set(playerData);
                
                // Setup room listeners
                setupRoomListeners();
                
                // Show waiting screen
                document.getElementById('room-code-display').textContent = gameState.roomCode;
                showScreen('waiting-screen');
                document.getElementById('host-controls').style.display = 'none';
                
            } catch (error) {
                console.error('Error joining room:', error);
                alert('Odaya katılırken hata oluştu: ' + error.message);
            }
        }

        function setupRoomListeners() {
            if (!roomRef) return;
            
            // Players listener
            playersRef = roomRef.child('players');
            playersRef.on('value', (snapshot) => {
                updateWaitingRoom();
            });
            
            // Game state listener  
            gameRef = roomRef.child('gameState');
            gameRef.on('value', (snapshot) => {
                const gameStateData = snapshot.val();
                if (gameStateData && gameStateData.gameStarted) {
                    startOnlineGameplay(gameStateData);
                }
            });
            
            // Room deleted listener
            roomRef.on('value', (snapshot) => {
                if (!snapshot.exists()) {
                    alert('Oda kapatıldı!');
                    leaveRoom();
                }
            });
        }

        async function updateWaitingRoom() {
            if (!roomRef) return;
            
            try {
                const snapshot = await roomRef.once('value');
                const roomData = snapshot.val();
                
                if (!roomData) return;
                
                const players = roomData.players || {};
                const playerList = Object.entries(players);
                
                // Update player count
                document.getElementById('player-count-waiting').textContent = playerList.length;
                
                // Update players list
                const waitingPlayersList = document.getElementById('waiting-players-list');
                waitingPlayersList.innerHTML = '';
                
                playerList.forEach(([playerId, playerData]) => {
                    const playerElement = document.createElement('div');
                    playerElement.className = 'waiting-player';
                    
                    const playerName = playerData.name || 'Oyuncu ' + (playerList.indexOf([playerId, playerData]) + 1);
                    
                    playerElement.innerHTML = `
                        <div style="font-size: 2em;">${playerData.character}</div>
                        <div style="flex: 1;">
                            <strong>${playerName}</strong>
                            ${playerData.isHost ? '<div class="host-badge">HOST</div>' : ''}
                        </div>
                        <div style="opacity: 0.6;">
                            ${playerData.connected ? '🟢' : '🔴'}
                        </div>
                    `;
                    
                    waitingPlayersList.appendChild(playerElement);
                });
                
                // Enable start button for host if enough players
                if (gameState.isHost) {
                    const startBtn = document.getElementById('start-online-btn');
                    startBtn.disabled = playerList.length < 2;
                }
                
            } catch (error) {
                console.error('Error updating waiting room:', error);
            }
        }

        async function startOnlineGame() {
            if (!gameState.isHost || !roomRef) return;
            
            if (soundSystem) soundSystem.playClickSound();
            
            try {
                const snapshot = await roomRef.once('value');
                const roomData = snapshot.val();
                const players = roomData.players || {};
                
                if (Object.keys(players).length < 2) {
                    alert('En az 2 oyuncu gerekli!');
                    return;
                }
                
                // Get question count from host controls
                const selectedCount = document.querySelector('#waiting-screen .count-btn.selected');
                const questionCount = selectedCount ? parseInt(selectedCount.dataset.count) : 10;
                
                // Prepare game state
                const gameStateData = {
                    gameStarted: true,
                    currentQuestion: 0,
                    currentPlayer: 0,
                    questionCount: questionCount,
                    questions: shuffleArray([...allQuestions]).slice(0, questionCount),
                    players: players,
                    startedAt: firebase.database.ServerValue.TIMESTAMP
                };
                
                await roomRef.child('gameState').set(gameStateData);
                
            } catch (error) {
                console.error('Error starting online game:', error);
                alert('Oyun başlatılırken hata oluştu!');
            }
        }

        function startOnlineGameplay(gameStateData) {
            // Convert Firebase data to local game state
            gameState.players = Object.entries(gameStateData.players).map(([id, data]) => ({
                id: id,
                name: data.name || 'Oyuncu',
                character: data.character,
                score: data.score || 0
            }));
            
            gameState.questions = gameStateData.questions;
            gameState.questionCount = gameStateData.questionCount;
            gameState.currentQuestion = gameStateData.currentQuestion;
            gameState.currentPlayer = gameStateData.currentPlayer;
            
            // Start the game
            createGameHeader();
            showScreen('game-screen');
            loadNextQuestion();
            
            if (soundSystem && !gameState.isMuted) {
                soundSystem.startBackgroundMusic();
            }
        }

        async function leaveRoom() {
            if (soundSystem) soundSystem.playClickSound();
            
            try {
                if (roomRef && gameState.playerId) {
                    // Remove player from room
                    await roomRef.child('players/' + gameState.playerId).remove();
                    
                    // If host is leaving and there are other players, transfer host
                    if (gameState.isHost) {
                        const snapshot = await roomRef.once('value');
                        const roomData = snapshot.val();
                        const remainingPlayers = roomData?.players || {};
                        
                        if (Object.keys(remainingPlayers).length > 0) {
                            const newHostId = Object.keys(remainingPlayers)[0];
                            await roomRef.child('host').set(newHostId);
                            await roomRef.child('players/' + newHostId + '/isHost').set(true);
                        } else {
                            // No players left, delete room
                            await roomRef.remove();
                        }
                    }
                    
                    // Clean up listeners
                    if (playersRef) playersRef.off();
                    if (gameRef) gameRef.off();
                    if (roomRef) roomRef.off();
                }
                
                // Reset state
                gameState.isOnline = false;
                gameState.roomCode = null;
                gameState.isHost = false;
                gameState.playerId = null;
                roomRef = null;
                playersRef = null;
                gameRef = null;
                
                showScreen('online-screen');
                
            } catch (error) {
                console.error('Error leaving room:', error);
                showScreen('online-screen');
            }
        }
                